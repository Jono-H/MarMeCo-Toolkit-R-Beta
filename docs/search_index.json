[["index.html", "Marine Megafauna Conservation Toolkit Preface", " Marine Megafauna Conservation Toolkit BirdLife International Partnership Preface "],["tracking-data-introduction.html", "1 Tracking data: Introduction 1.1 Introduction to animal tracking data considered in this toolkit 1.2 Lay introduction to GPS, PTT, GLS devices", " 1 Tracking data: Introduction This chapter was built with R version 4.2.2 (2022-10-31 ucrt) The chapter was last updated on 2023-06-12 1.1 Introduction to animal tracking data considered in this toolkit This toolkit focuses on the analysis of data primarily from GPS and PTT devices. Some of the analyses may be extended to data from GLS devices. For all devices, we encourage users to understand the limitations of each device and how these limitations can affect interpretation of animal movement patterns. For a general introduction into understanding animal movement patterns, we refer users to: animal movement references TBC For a general introduction into understanding seabird movement patterns, we refer users to: seabird movement references TBC For a general introduction into understanding GPS, PTT and GLS technologies, we refer users to: GPS, PTT, GLS references TBC 1.2 Lay introduction to GPS, PTT, GLS devices [Consider from MIRO board: Figure: Location data associated with different device types: GPS | PTT | GLS. Showcasing error associated with devices.] "],["tracking-data-sampling-strategy.html", "2 Tracking data: Sampling strategy 2.1 Sampling strategy when collecting animal tracking data for seabirds 2.2 How many birds should you track? 2.3 How many years of tracking data should you collect? 2.4 How many years of tracking data should you collect for IBA or KBA identification? 2.5 Which locations should you track animals from? 2.6 Sampling strategy general recommendations", " 2 Tracking data: Sampling strategy This chapter was built with R version 4.2.2 (2022-10-31 ucrt) The chapter was last updated on 2023-06-12 2.1 Sampling strategy when collecting animal tracking data for seabirds Animal tracking technology has evolved with respect to size and cost of devices. Hence, the opportunities for collecting tracking data have changed too. In the past - when devices were much larger and much more expensive - it was likely that few birds were tracked. Tracking typically occurred from sites that were more accessible than others, as opposed to sites specifically being chosen for their larger source populations. While this type of sampling strategy (selecting sites for accessibility) is often dictated by pragmatic choices needing to be made, or alternate research questions being addressed, outputs from these studies may not necessarily lend themselves well to the identification of globally important sites such as IBAs and KBAs. Researchers must take sampling strategy into account when considering the type of question they wish to answer in their studies. Of course, data collected from one study may be used in a different study in future. But the utility of such data being considered for retrospective analyses should be considered appropriately. 2.2 How many birds should you track? There is no precise answer to this question. The answer in part depends on what kind of question you are trying to answer about a particular species. If you are tracking a globally threatened species with an extremely small population size, or are tracking a species highly sensitive to devices being deployed on it, then a small number of individuals being tracked may be sufficient to identify where an important site might be. However, we suggest that at least 10 birds from a unique dataGroup are tracked before inferring movement patterns about a particular source population. dataGroup: learn more about how to define a dataGroup in the dataGroup chapter. 2.3 How many years of tracking data should you collect? Again, there is no precise answer to this question. Recent evidence, based on GPS tracking of 23 chick-rearing seabird species, suggests that: tracking chick-rearing seabirds across years improves the estimation of at-sea spatial distributions. However, in most cases the information gain is marginal. samples collected in only one or two years can be useful for the identification of important sites. of key importance when considering tracking data for questions related to area-based conservation is whether the sample of tracked individuals is representative at the population level. when only one or two years of tracking data are available for important site identification, using independent evidence to assess whether conditions were typical of the region and time of year is critical for interpretation of results. if conditions were atypical, then further years of sampling may be warranted. One to two years of tracking data may be sufficient to inform area-based conservation decisions. However, long-term studies will still be critical to inform how seabirds may respond to envrionmental perturbation. 2.4 How many years of tracking data should you collect for IBA or KBA identification? [See: KBA Guidelines. Discuss appropriate text with Charlotte] 2.5 Which locations should you track animals from? A number of factors may dictate which locations you track animals from. Broadly speaking, these factors may include: sites selected depending on the research question you wish to address sites selected owing to feasibility of accessing sites sites selected according to species known ecology, and hence ability to capture and deploy (and / or retrieve where necessary) devices on animals In the context of the marine toolkit, where identification of globally important marine sites is often linked to individuals tracked from a particular source location (i.e. the dataGroup): we advise investigators to track animals from source locations where those sites themselves would trigger relevant IBA or KBA criteria. [Further figure should be provided to better showcase sampling strategy] 2.6 Sampling strategy general recommendations In general, to support identification of an important site at sea from animal tracking data, we suggest the following: A minimum of 10 individual animals are tracked; all from the same source population Data from the 10 individual animals that are tracked should all represent data from the same life-cycle stage, within a given year, when it is expected that animals are moving in a similar manner to one another. (e.g. for penguins, you should have tracking information for all 10 individuals from within the chick-guard period) the dataGroup: [consider text here about the dataGroup] "],["tracking-data-load-data-into-r-and-visualise.html", "3 Tracking data: Load data into R and visualise 3.1 Description of the example dataset 3.2 Load packages 3.3 Input parameters for chapter tutorial 3.4 Storing, reading, and formatting raw tracking data 3.5 Load raw tracking data 3.6 Format data to match that of the Seabird Tracking Database 3.7 Review of the example data so far 3.8 Explore the tabular data 3.9 Review of summary output 3.10 Arrange data and remove duplicate entries 3.11 Visualise all the location data 3.12 Review of overall plot for all data points 3.13 Save all the location data as a shapefile 3.14 Save all the location data as a plot 3.15 Visualise individual animal tracks", " 3 Tracking data: Load data into R and visualise This tutorial uses example data from a project led by the BirdLife International partner in Croatia: BIOM The citation for this data is: TBC The example data can be downloaded from: TBC - SBTD Analyses outlined in this chapter were performed in R version 4.2.2 (2022-10-31 ucrt) This chapter was last updated on 2023-06-12 3.1 Description of the example dataset Species tracked: Yelkouan Shearwater (Puffinus yelkouan) Life-cycle stage when birds were tracked: chick-rearing Site / source population birds tracked from: Lastovo SPA, Croatia Years birds were tracked over: 2019, 2020 Devices birds were tracked with: GPS Device model type: PathTrack nanoFix GPS/UHF transmitters (≤ 5.5 g) [Figure showcasing Lastovo SPA and source populations] 3.2 Load packages Load required R packages: If the package(s) fails to load, you will need to install the relevant package(s). ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## Load libraries -------------------------------------------------------------- ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## sf package for spatial data analyses (i.e. vector files such as points, lines, polygons) library(sf) ## Tidyverse for data manipulation library(tidyverse) ## ggplot2 for plotting opionts library(ggplot2) ## rnaturalearth package for geographic basemaps in R library(rnaturalearth) ## leaflet package for interactive maps in R library(leaflet) ## lubridate for date time library(lubridate) 3.3 Input parameters for chapter tutorial Here we define input parameters needed for sections of the code later in this tutorial. Depending on how your data is set up, you should not need to define any further input parameters. ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## Specify projections / store needed CRS definitions as variables ---- ## SEE: https://epsg.io/ ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## world - unprojected coordinates wgs84 &lt;- st_crs(&quot;EPSG:4326&quot;) ## Croatia - projected coordinates htrs96 &lt;- st_crs(&quot;EPSG:3765&quot;) ## Source a world map from the rnaturalearth R package ## see details of function to change the type of map you get worldmap &lt;- rnaturalearth::ne_download(scale = &quot;large&quot;, type = &quot;countries&quot;, category = &quot;cultural&quot;, destdir = tempdir(), load = TRUE, returnclass = &quot;sf&quot;) 3.4 Storing, reading, and formatting raw tracking data 3.4.1 Storing raw tracking data The type of device you use will dictate what format your raw tracking data is stored in. Typically, we will work with .csv files. Good file management is critical when working with large tracking datasets. [As a guide, the following file structure can support efficient data management] 3.4.2 Reading raw tracking data into R / Rstudio Depending on your file structure, type of raw data, and size of your overall data, we recommend reading data into R in a way that produces a single data frame (or tibble) for all your data required for a specific analysis. [Example R code for reading in raw tracking data is provided in the Appendix] 3.4.3 Format of data Having data standardised into a common format greatly improves reproducible research, and also the ability for data to be used in other studies. The primary format we recommend is that of BirdLife International’s Seabird Tracking Database: - https://www.seabirdtracking.org/ We recognise, however, that this format may not be appropriate for all analyses. Nevertheless, we encourage users to standardise their data into a common format. This will facilitate the ease through which data can be reformatted when necessary for other analyses. [Decide on best way to show example datasets - either as screen shot images? Or as example data files? Or perhaps as both. Maybe just taking subsets of the data as required.] 3.5 Load raw tracking data Below, we load the raw tracking data obtained for Yelkouan Shearwaters. To see how this data was loaded into R originally, and merged to create a single data frame, see the example code in the Appendix. [Example R code for reading in raw tracking data is provided in the Appendix] The load function supports loading various R file formats. Here we are loading an .Rdata file. The file was previously saved with the name of yelk. So when we load the file, an object called yelk will be loaded into the working environment in R. ## Load the example data for Yelkouan Shearwaters load(&quot;data-testing/tracking-data/Tracking_YESH_raw.Rdata&quot;) ## view the first two rows of data ## First view the data in tibble format head(yelk,2) ## # A tibble: 2 × 16 ## day month year hour minute second satell…¹ latit…² longi…³ altit…⁴ time_…⁵ ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 24 5 19 0 49 9 5 42.8 16.9 -1.5 2.91 ## 2 24 5 19 1 9 3 5 42.8 16.9 5.25 2.80 ## # … with 5 more variables: accuracy &lt;dbl&gt;, voltage &lt;dbl&gt;, colony_code &lt;chr&gt;, ## # bird_id &lt;chr&gt;, dttm &lt;dttm&gt;, and abbreviated variable names ¹​satellites, ## # ²​latitude, ³​longitude, ⁴​altitude, ⁵​time_offset ## Then view the data in data frame format head(data.frame(yelk),2) ## day month year hour minute second satellites latitude longitude altitude ## 1 24 5 19 0 49 9 5 42.81153 16.88553 -1.50 ## 2 24 5 19 1 9 3 5 42.81203 16.88691 5.25 ## time_offset accuracy voltage colony_code bird_id ## 1 2.910 4.70376e-07 4.12 Z 19_Tag17600_Z-9 ## 2 2.795 9.25368e-07 4.08 Z 19_Tag17600_Z-9 ## dttm ## 1 2019-05-24 00:49:09 ## 2 2019-05-24 01:09:03 tibble vs data frame: we don’t go into the specifics of these different data formats. The key message is that each provides a different way of interacting with, or viewing, data. Both are essentially a mechanism through which to work with tabular data. (i.e. data in rows and columns) [Decide on best way to show example datasets – either screen shot images? Or as example data files? Or perhaps as both. Maybe just taking subsets of the data as required.] 3.6 Format data to match that of the Seabird Tracking Database In the example dataset, you will notice that the data is not in the format of that relating to the seabird tracking database. We can reformat the data by extracting the relevant columns of information, and by adding in any information where it might be missing. ## First, add relevant columns of information to align with SBTD format ## the mutate functions allows you to add a new column of information. ## add the new columns and rename the object to a more standardised name. df_sbtd &lt;- yelk %&gt;% dplyr::mutate(dataset_id = &quot;tbc&quot;, scientific_name = &quot;Puffinus yelkouan&quot;, common_name = &quot;Yelkouan Shearwater&quot;, site_name = &quot;Lastovo SPA&quot;, lat_colony = &quot;tbc&quot;, lon_colony = &quot;tbc&quot;, device = &quot;GPS&quot;, age= &quot;adult&quot;, sex= &quot;unknown&quot;, breed_stage = &quot;chick-rearing&quot;, breed_status = &quot;breeding&quot;, argos_quality = NA, equinox = NA) ## Create the separate date and time columns to match the format of the SBTD, where ## these columns are provided separately df_sbtd &lt;- df_sbtd %&gt;% mutate(date_gmt = date(dttm), time_gmt = format(dttm, format = &quot;%H:%M:%S&quot;)) ## review the changes you have made (i.e. the new columns you have added) head(data.frame(df_sbtd),2) ## day month year hour minute second satellites latitude longitude altitude ## 1 24 5 19 0 49 9 5 42.81153 16.88553 -1.50 ## 2 24 5 19 1 9 3 5 42.81203 16.88691 5.25 ## time_offset accuracy voltage colony_code bird_id ## 1 2.910 4.70376e-07 4.12 Z 19_Tag17600_Z-9 ## 2 2.795 9.25368e-07 4.08 Z 19_Tag17600_Z-9 ## dttm dataset_id scientific_name common_name ## 1 2019-05-24 00:49:09 tbc Puffinus yelkouan Yelkouan Shearwater ## 2 2019-05-24 01:09:03 tbc Puffinus yelkouan Yelkouan Shearwater ## site_name lat_colony lon_colony device age sex breed_stage ## 1 Lastovo SPA tbc tbc GPS adult unknown chick-rearing ## 2 Lastovo SPA tbc tbc GPS adult unknown chick-rearing ## breed_status argos_quality equinox date_gmt time_gmt ## 1 breeding NA NA 2019-05-24 00:49:09 ## 2 breeding NA NA 2019-05-24 01:09:03 ## Now select all the relevant columns to align data with the format of the ## seabird tracking database. ## There are 21 columns of data in the format for the SBTD. ## Remember, when you use the select function, you can also rename columns simultaneously. df_sbtd &lt;- df_sbtd %&gt;% dplyr::select(dataset_id, scientific_name, common_name, site_name, ## below for example, we select the column ## called colony_code but rename it to colony_name colony_name = colony_code, lat_colony, lon_colony, device, bird_id = bird_id, track_id = bird_id, original_track_id = bird_id, age, sex, breed_stage, breed_status, date_gmt, time_gmt, latitude, longitude, argos_quality, equinox) ## review the changes again head(data.frame(df_sbtd),2) ## dataset_id scientific_name common_name site_name colony_name ## 1 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## 2 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## lat_colony lon_colony device bird_id track_id ## 1 tbc tbc GPS 19_Tag17600_Z-9 19_Tag17600_Z-9 ## 2 tbc tbc GPS 19_Tag17600_Z-9 19_Tag17600_Z-9 ## original_track_id age sex breed_stage breed_status date_gmt ## 1 19_Tag17600_Z-9 adult unknown chick-rearing breeding 2019-05-24 ## 2 19_Tag17600_Z-9 adult unknown chick-rearing breeding 2019-05-24 ## time_gmt latitude longitude argos_quality equinox ## 1 00:49:09 42.81153 16.88553 NA NA ## 2 01:09:03 42.81203 16.88691 NA NA 3.7 Review of the example data so far For the following columns, you may notice a few things: dataset_id is specified as tbc. This is because until data has been loaded into the SBTD, it will not have a unique dataset identification code that would relate to the dataset stored in the SBTD. lat_colony, lon_colony are specified as tbc, because we still need to define what the colony coordinates would be for each of locations birds were tagged from. bird_id, track_id, original_track_id, are all specified with the same code. This is because when data is formatted to align with the format of the SBTD: we have a code that relates to the bird that was tracked (bird_id) we have a SBTD unique code that relates to each trip undertaken by the bird, when multiple trips are recorded (track_id). Note though, it is often the case that users do not provide data which has been pre-split into unique trips. Therefore, it is often the case that all entries relating to track_id match that of bird_id. we have a user defined code that can relate to each trip undertaken by the bird. However, the same caveat in the case of track_id applies to this column of data too. argos_quality and equinox are both specified as NA. This is because our data relates to GPS data which does not have an argos_quality estimate (typical of PTT devices) or a measure relating to the equinox (typical of GLS devices). 3.8 Explore the tabular data Before you plot any data, it can be a good idea to broadly explore the data. While you might know which species you tracked, and from which colonies, and from which years, it can often be worth checking over these (and other) aspects of your data. Checking the data helps refresh your view on what data you have, and also helps you pick up any errors that may have arisen when inputting data. ## Reminder on what the data looks like so far head(data.frame(df_sbtd),2) ## dataset_id scientific_name common_name site_name colony_name ## 1 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## 2 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## lat_colony lon_colony device bird_id track_id ## 1 tbc tbc GPS 19_Tag17600_Z-9 19_Tag17600_Z-9 ## 2 tbc tbc GPS 19_Tag17600_Z-9 19_Tag17600_Z-9 ## original_track_id age sex breed_stage breed_status date_gmt ## 1 19_Tag17600_Z-9 adult unknown chick-rearing breeding 2019-05-24 ## 2 19_Tag17600_Z-9 adult unknown chick-rearing breeding 2019-05-24 ## time_gmt latitude longitude argos_quality equinox ## 1 00:49:09 42.81153 16.88553 NA NA ## 2 01:09:03 42.81203 16.88691 NA NA ## Review the main columns of data separately. This helps check for errors associated ## with data entry. E.g. perhaps you typed chick-rearing and CHICK-rearing. Because ## of the difference in lower-case vs. upper-case text, you might accidentally consider ## these as separate components of your dataset. ## the table function is useful to check the unique number of entries per unique input table(df_sbtd$scientific_name) ## ## Puffinus yelkouan ## 16703 table(df_sbtd$site_name) ## ## Lastovo SPA ## 16703 table(df_sbtd$colony_name) ## ## VM VR Z ## 3610 1739 11354 table(df_sbtd$breed_status) ## ## breeding ## 16703 table(df_sbtd$breed_stage) ## ## chick-rearing ## 16703 table(df_sbtd$age) ## ## adult ## 16703 table(df_sbtd$sex) ## ## unknown ## 16703 ## Summarise the data by species, site_name, colony_name, year, ## breed_status, breed_stage, age, sex. ## First we add a new year column by splitting the date column so we can get information about years df_overview &lt;- df_sbtd %&gt;% mutate(year = year(date_gmt)) %&gt;% ## then we group the data by relevant columns group_by(scientific_name, site_name, colony_name, year, breed_status, breed_stage, age, sex) %&gt;% ## then we continue to summarise by the distinct number of entries per group summarise(n_birds = n_distinct(bird_id), n_tracks = n_distinct(track_id), n_original_tracks = n_distinct(original_track_id)) ## review the summary output df_overview ## # A tibble: 4 × 11 ## # Groups: scientific_name, site_name, colony_name, year, breed_status, ## # breed_stage, age [4] ## scientific…¹ site_…² colon…³ year breed…⁴ breed…⁵ age sex n_birds n_tra…⁶ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 Puffinus ye… Lastov… VM 2020 breedi… chick-… adult unkn… 8 8 ## 2 Puffinus ye… Lastov… VR 2021 breedi… chick-… adult unkn… 1 1 ## 3 Puffinus ye… Lastov… Z 2019 breedi… chick-… adult unkn… 19 19 ## 4 Puffinus ye… Lastov… Z 2020 breedi… chick-… adult unkn… 15 15 ## # … with 1 more variable: n_original_tracks &lt;int&gt;, and abbreviated variable ## # names ¹​scientific_name, ²​site_name, ³​colony_name, ⁴​breed_status, ## # ⁵​breed_stage, ⁶​n_tracks 3.9 Review of summary output From the summary output above we can see the following: scientific_name: we have tracking data from one species site_name: we have tracking data from one general site colony_name: we have tracking data from three colonies year: data comes from between 2019 and 2021 breed_status and breed_stage: all data relates to breeding birds in the chick-rearing life-cycle stage. age and sex: data is from adult birds of unknown sex n_birds, n_tracks, n_original_tracks: because n_birds = n_tracks, it indicates that: either the tracking data from each individual bird has not been separated into unique trips, or the tracking data from each individual bird is only representative of a single trip to sea 3.10 Arrange data and remove duplicate entries Once you have formatted your data into a standardised format and ensured that parts of your data is inputted correctly, it is also worth ensuring your data is ordered (arranged) correctly chronologically. An artifact of manipulating spatial data is that sometimes the data can become un-ordered with respect to time, or, given the way various devices interact with satellites, you can also end up with duplicated entries according to timestamps. This can be a first problem, causing your track to represent unrealistic movement patterns of the animal. We need to ensure our data is ordered correctly and also remove any duplicate timestamps. ## review your OVERALL data again head(data.frame(df_sbtd),2) ## dataset_id scientific_name common_name site_name colony_name ## 1 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## 2 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## lat_colony lon_colony device bird_id track_id ## 1 tbc tbc GPS 19_Tag17600_Z-9 19_Tag17600_Z-9 ## 2 tbc tbc GPS 19_Tag17600_Z-9 19_Tag17600_Z-9 ## original_track_id age sex breed_stage breed_status date_gmt ## 1 19_Tag17600_Z-9 adult unknown chick-rearing breeding 2019-05-24 ## 2 19_Tag17600_Z-9 adult unknown chick-rearing breeding 2019-05-24 ## time_gmt latitude longitude argos_quality equinox ## 1 00:49:09 42.81153 16.88553 NA NA ## 2 01:09:03 42.81203 16.88691 NA NA ## merge the date and time columns df_sbtd$dttm &lt;- with(df_sbtd, ymd(date_gmt) + hms(time_gmt)) ## first check how many duplicate entries you may have. If there are many, it ## is worth exploring your data further to understand why. n_duplicates &lt;- df_sbtd %&gt;% group_by(bird_id, track_id) %&gt;% arrange(dttm) %&gt;% dplyr::filter(duplicated(dttm) == T) ## review how many duplicate entries you may have. Print the message: print(paste(&quot;you have &quot;,nrow(n_duplicates), &quot; duplicate records in a dataset of &quot;, nrow(df_sbtd), &quot; records.&quot;, sep =&quot;&quot;)) ## [1] &quot;you have 11 duplicate records in a dataset of 16703 records.&quot; ## remove duplicates entries if no further exploration is deemed necessary df_sbtd &lt;- df_sbtd %&gt;% ## first group data by individual animals and unique track_ids group_by(bird_id, track_id) %&gt;% ## then arrange by timestamp arrange(dttm) %&gt;% ## then if a timestamp is duplicated (TRUE), then don&#39;t select this data entry. ## only select entries where timestamps are not duplicated (i.e. FALSE) dplyr::filter(duplicated(dttm) == F) 3.11 Visualise all the location data Using the leaflet package in R, you can easily visualise your tracking data interactively within RStudio. What should you look for when visualising the raw data? * Are your locations in realistic places? * Have you perhaps mixed up the latitude and longitude columns? * Does your data cross the international date line? Do you know how to deal with this? * Will you need to remove sections of the data that do not represent a time when the animal was tagged? (e.g. perhaps you set the device to start recording locations before deploying on the animal. So the tag might have recorded while you were travelling to the deployment location. Therefore, removing these sections of the track will facilitate your overall analysis.) ## review your OVERALL data again head(data.frame(df_sbtd),2) ## dataset_id scientific_name common_name site_name colony_name ## 1 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## 2 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## lat_colony lon_colony device bird_id track_id ## 1 tbc tbc GPS 19_Tag17652_Z-2 19_Tag17652_Z-2 ## 2 tbc tbc GPS 19_Tag17652_Z-2 19_Tag17652_Z-2 ## original_track_id age sex breed_stage breed_status date_gmt ## 1 19_Tag17652_Z-2 adult unknown chick-rearing breeding 2019-05-01 ## 2 19_Tag17652_Z-2 adult unknown chick-rearing breeding 2019-05-01 ## time_gmt latitude longitude argos_quality equinox dttm ## 1 21:40:41 42.81508 16.89058 NA NA 2019-05-01 21:40:41 ## 2 22:00:41 42.83751 16.89750 NA NA 2019-05-01 22:00:41 ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## visualise all data ---- ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## number of datapoints nrow(df_sbtd) ## [1] 16692 ## interactive plot map.alldata &lt;- leaflet() %&gt;% ## start leaflet plot ## select background imagery addProviderTiles(providers$Esri.WorldImagery, group = &quot;World Imagery&quot;) %&gt;% ## plot the points. Note: leaflet automatically finds lon / lat colonies addCircleMarkers(data = df_sbtd, ## size of points radius = 3, ## colour of points fillColor = &quot;cyan&quot;, ## transparency of points fillOpacity = 0.5, ## set stroke = F to remove borders around points stroke = F) ## generate the plot map.alldata 3.12 Review of overall plot for all data points Based on the interactive plot, you can see that generally the data looks good. Generally, all the locations are in the Adriatic Sea area (something we would anticipate based on what we know about Yelkouan Shearwaters breeding in Croatia). We can conclude the following: Locations appear to be in realistic places. It’s unlikely that we have mixed up the latitude and longitude columns. The data does not cross the international date line. Regarding removing sections of the data that do not represent a time when the animal was tagged: Later filtering steps may remove these parts of the track if locations are near the vicinity of the colony (see details of the tripSplit() function. However, if there are broader location data associated with these types of locations, you will need to remove these sections of the track. 3.13 Save all the location data as a shapefile Visualising all the location data in R can be a simpler starting point. You may also want to save this data as a shapefile (.shp) for viewing in GIS software such as QGIS or ArcGIS. Note: saving all data as a single shapefile can be a memory intensive task (i.e. if you have a lot of data, then your computer might take a long time to save the file, or the file will be big and slow to work with) ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## First add a simplified unique id and create the sf spatial object ---- ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## Review data head(data.frame(df_sbtd),2) ## dataset_id scientific_name common_name site_name colony_name ## 1 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## 2 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## lat_colony lon_colony device bird_id track_id ## 1 tbc tbc GPS 19_Tag17652_Z-2 19_Tag17652_Z-2 ## 2 tbc tbc GPS 19_Tag17652_Z-2 19_Tag17652_Z-2 ## original_track_id age sex breed_stage breed_status date_gmt ## 1 19_Tag17652_Z-2 adult unknown chick-rearing breeding 2019-05-01 ## 2 19_Tag17652_Z-2 adult unknown chick-rearing breeding 2019-05-01 ## time_gmt latitude longitude argos_quality equinox dttm ## 1 21:40:41 42.81508 16.89058 NA NA 2019-05-01 21:40:41 ## 2 22:00:41 42.83751 16.89750 NA NA 2019-05-01 22:00:41 ## add a simplified animal ID column - a simple number for each unique animal tracked df_sbtd$bird_id_num &lt;- as.numeric(factor(df_sbtd$bird_id, levels = unique(df_sbtd$bird_id))) ## Review data again (tail function prints the end of the dataframe so you can ## check if the last unique number matches the number of animals you tracked.) head(data.frame(df_sbtd),2) ## dataset_id scientific_name common_name site_name colony_name ## 1 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## 2 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## lat_colony lon_colony device bird_id track_id ## 1 tbc tbc GPS 19_Tag17652_Z-2 19_Tag17652_Z-2 ## 2 tbc tbc GPS 19_Tag17652_Z-2 19_Tag17652_Z-2 ## original_track_id age sex breed_stage breed_status date_gmt ## 1 19_Tag17652_Z-2 adult unknown chick-rearing breeding 2019-05-01 ## 2 19_Tag17652_Z-2 adult unknown chick-rearing breeding 2019-05-01 ## time_gmt latitude longitude argos_quality equinox dttm ## 1 21:40:41 42.81508 16.89058 NA NA 2019-05-01 21:40:41 ## 2 22:00:41 42.83751 16.89750 NA NA 2019-05-01 22:00:41 ## bird_id_num ## 1 1 ## 2 1 tail(data.frame(df_sbtd),2) ## dataset_id scientific_name common_name site_name colony_name ## 16691 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA VR ## 16692 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA VR ## lat_colony lon_colony device bird_id track_id ## 16691 tbc tbc GPS 21_Tag41220_VR-1 21_Tag41220_VR-1 ## 16692 tbc tbc GPS 21_Tag41220_VR-1 21_Tag41220_VR-1 ## original_track_id age sex breed_stage breed_status date_gmt ## 16691 21_Tag41220_VR-1 adult unknown chick-rearing breeding 2021-07-09 ## 16692 21_Tag41220_VR-1 adult unknown chick-rearing breeding 2021-07-09 ## time_gmt latitude longitude argos_quality equinox dttm ## 16691 18:10:17 42.80311 16.78880 NA NA 2021-07-09 18:10:17 ## 16692 19:10:14 42.80255 16.79699 NA NA 2021-07-09 19:10:14 ## bird_id_num ## 16691 43 ## 16692 43 ## create the sf spatial object df_sbtd_sf &lt;- df_sbtd %&gt;% ## first create new columns of lon and lat again so you keep this location ## information in tabular format. mutate(lon_device = longitude, lat_device = latitude) %&gt;% ## then convert object to sf spatial object st_as_sf(coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = wgs84) ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## Save raw tracking data as shapefile for viewing in GIS software ---- ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## Option allows for multispecies data ## Or the loop will only run once if you have single species data for(i in unique(df_sbtd$scientific_name)){ ## subset the data taking the track information for each unique species temp_species &lt;- df_sbtd_sf %&gt;% dplyr::filter(scientific_name == i) ## create new folder within current working directory where you will save data ## first create the name of the species and the file path you need ## also use gsub to replace spaces within character strings (words) with a &quot;-&quot; species_name &lt;- gsub(&quot; &quot;, &quot;-&quot;, temp_species$scientific_name[1]) ## print the name for checking print(species_name) ## then create the new folder within current working directory path_to_folder &lt;- paste(&quot;./data-testing/tracking-data/&quot;, species_name, &quot;/shapefiles-all-tracks&quot;, sep=&quot;&quot;) ## print the file path name for checking print(path_to_folder) ## Check if folder exists, and if it does not, then make a new folder if (!file.exists(path_to_folder)) { # If it does not exist, create a new folder dir.create(path_to_folder) print(paste(&quot;Created folder:&quot;, path_to_folder)) } else { # do nothing, but let us know the folder exists already print(paste(&quot;Folder already exists:&quot;, path_to_folder)) } ## write the spatial data as a shapefile ## NOTE: For some GIS software, column names will be abbreviated upon saving ## NOTE: If you have very long file paths, this operation may fail. One solution ## is to save the shapefile elsewhere. Another solution is to instead save the file ## as a geopackage (.gpkg): simply replace the .shp text below with .gpkg st_write(df_sbtd_sf, paste(path_to_folder,&quot;/&quot;, species_name, &quot;_AllTracks.shp&quot;, sep = &quot;&quot;), delete_layer = TRUE) ## remove the temporary file at the end of each loop rm(temp_species) } 3.14 Save all the location data as a plot [A simple plot to look at all the point location data] ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## Save raw tracking data as simple plot ---- ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## Option allows for multispecies data ## Or the loop will only run once if you have single species data for(i in unique(df_sbtd$scientific_name)){ ## subset the data taking the track information for each unique species temp_species &lt;- df_sbtd_sf %&gt;% dplyr::filter(scientific_name == i) ## create new folder within current working directory where you will save data ## first create the name of the species and the file path you need ## also use gsub to replace spaces within character strings (words) with a &quot;-&quot; species_name &lt;- gsub(&quot; &quot;, &quot;-&quot;, temp_species$scientific_name[1]) ## print the name for checking print(species_name) ## then create the new folder within current working directory path_to_folder &lt;- paste(&quot;./data-testing/tracking-data/&quot;, species_name, &quot;/plots-all-tracks&quot;, sep=&quot;&quot;) ## print the file path name for checking print(path_to_folder) ## Check if folder exists, and if it does not, then make a new folder if (!file.exists(path_to_folder)) { # If it does not exist, create a new folder dir.create(path_to_folder) print(paste(&quot;Created folder:&quot;, path_to_folder)) } else { # do nothing, but let us know the folder exists already print(paste(&quot;Folder already exists:&quot;, path_to_folder)) } ## plot track information for each unique species plot_alltracks &lt;- ggplot() + ## Use the world map data as the underlying basemap geom_sf(data = worldmap, fill = &quot;grey&quot;) + ## Add the point data as transparent cyan circles geom_point(data = df_sbtd_sf, aes(x = lon_device, y = lat_device), color = &quot;cyan&quot;, alpha = 0.5) + ## plot the basemap again, but this time superimpose only the country borders over the point data ## this is to help you see better which points might obviously be over land. geom_sf(data = worldmap, fill = NA, color = &quot;black&quot;) + ## Set the bounding box to only include the point locations coord_sf(xlim = range(df_sbtd_sf$lon_device), ylim = range(df_sbtd_sf$lat_device)) + ## Customize the x and y axis labels labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;) + ## add a title to the plot ggtitle(paste(species_name, &quot;\\n&quot;, &quot;points-all-animals&quot;,sep=&quot;&quot;)) + theme(plot.title = element_text(hjust = 0.5)) ## the plot plot_alltracks ## save the plot ggsave(paste(path_to_folder, &quot;/&quot;, species_name, &quot;_all-points.png&quot;, sep = &quot;&quot;), plot_alltracks, ## when units in mm, then width = 160, height = 160, dpi = 300, units = &quot;mm&quot;) ## remove the temporary file at the end of each loop rm(temp_species) } 3.15 Visualise individual animal tracks Once you have reviewed the overall status of the tracking data you collected, it can be worth assessing the tracks of individual animals. This can give you a better idea of the quality of the data for each individual. Visualising tracking data from individual animals can help you understand which data you might remove, or which data you might try and salvage. Depending on the amount of data you have, you can often initially a perform a static exploration of tracks from each individual (i.e. a simple plot of tracks from each individual), followed by an interactive exploration of tracks from all individuals, or only data from those individuals where interactive exploration is deemed necessary. Below, outlines options for visualising individual animal tracks. 3.15.1 Denote beginning and end of tracks for individual animals entire track ## reminder on data structure head(data.frame(df_sbtd_sf),2) ## dataset_id scientific_name common_name site_name colony_name ## 1 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## 2 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## lat_colony lon_colony device bird_id track_id ## 1 tbc tbc GPS 19_Tag17652_Z-2 19_Tag17652_Z-2 ## 2 tbc tbc GPS 19_Tag17652_Z-2 19_Tag17652_Z-2 ## original_track_id age sex breed_stage breed_status date_gmt ## 1 19_Tag17652_Z-2 adult unknown chick-rearing breeding 2019-05-01 ## 2 19_Tag17652_Z-2 adult unknown chick-rearing breeding 2019-05-01 ## time_gmt argos_quality equinox dttm bird_id_num lon_device ## 1 21:40:41 NA NA 2019-05-01 21:40:41 1 16.89058 ## 2 22:00:41 NA NA 2019-05-01 22:00:41 1 16.89750 ## lat_device geometry ## 1 42.81508 POINT (16.89058 42.81508) ## 2 42.83751 POINT (16.8975 42.83751) head(data.frame(df_sbtd),2) ## dataset_id scientific_name common_name site_name colony_name ## 1 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## 2 tbc Puffinus yelkouan Yelkouan Shearwater Lastovo SPA Z ## lat_colony lon_colony device bird_id track_id ## 1 tbc tbc GPS 19_Tag17652_Z-2 19_Tag17652_Z-2 ## 2 tbc tbc GPS 19_Tag17652_Z-2 19_Tag17652_Z-2 ## original_track_id age sex breed_stage breed_status date_gmt ## 1 19_Tag17652_Z-2 adult unknown chick-rearing breeding 2019-05-01 ## 2 19_Tag17652_Z-2 adult unknown chick-rearing breeding 2019-05-01 ## time_gmt latitude longitude argos_quality equinox dttm ## 1 21:40:41 42.81508 16.89058 NA NA 2019-05-01 21:40:41 ## 2 22:00:41 42.83751 16.89750 NA NA 2019-05-01 22:00:41 ## bird_id_num ## 1 1 ## 2 1 #head(data.frame(df_sbtd2),2) ## add a column indicating start and end of tracks for each individual animal df_sbtd_sf &lt;- df_sbtd_sf %&gt;% group_by(bird_id_num) %&gt;% mutate(nlocs = 1:length(bird_id_num)) %&gt;% mutate(track_segment = if_else(nlocs &lt;= 10, &quot;track.start&quot;,&quot;track.journey&quot;)) %&gt;% ## note: if you have a track with less than 20 points, then you will overwrite ## some of the previous data. mutate(track_segment = if_else(nlocs %in% (length(bird_id_num)-9):(length(bird_id_num)),&quot;track.end&quot;,track_segment)) %&gt;% ## add a column indicating colour for start and end of tracks ## colours from: https://colorbrewer2.org/#type=qualitative&amp;scheme=Set2&amp;n=3 mutate(track_colour = if_else(nlocs &lt;= 10, &quot;#66c2a5&quot;,&quot;#8da0cb&quot;)) %&gt;% mutate(track_colour = if_else(nlocs %in% (length(bird_id_num)-9):(length(bird_id_num)),&quot;#fc8d62&quot;,track_colour)) 3.15.2 Save individual tracks as static plots [A simple plot to look at all the point location data for each individual tracked] ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## Save raw tracking data for each individual as a static plot ---- ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## reminder on data structure head(data.frame(df_sbtd_sf),2) for(i in 1:max(df_sbtd_sf$bird_id_num)){ ## subset the data taking the track information for each unique bird tagged temp_individual &lt;- df_sbtd_sf %&gt;% dplyr::filter(bird_id_num == i) ## create new folder (if needed) within current working directory where you will save data ## first create the name of the species and the file path you need ## also use gsub to replace spaces within character strings (words) with a &quot;-&quot; species_name &lt;- gsub(&quot; &quot;, &quot;-&quot;, temp_individual$scientific_name[1]) ## print the name for checking print(species_name) ## then create the new folder within current working directory path_to_folder &lt;- paste(&quot;./data-testing/tracking-data/&quot;, species_name, &quot;/plots-individual-tracks&quot;, sep=&quot;&quot;) ## print the file path name for checking print(path_to_folder) ## Check if folder exists, and if it does not, then make a new folder if (!file.exists(path_to_folder)) { # If it does not exist, create a new folder dir.create(path_to_folder) print(paste(&quot;Created folder:&quot;, path_to_folder)) } else { # do nothing, but let us know the folder exists already print(paste(&quot;Folder already exists:&quot;, path_to_folder)) } ## get animal id for naming plots animal_id &lt;- gsub(&quot; &quot;, &quot;-&quot;, temp_individual$bird_id[1]) ## plot track information for each unique species plot_individual_tracks &lt;- ggplot() + ## Use the world map data as the underlying basemap geom_sf(data = worldmap, fill = &quot;grey&quot;) + ## Add the point data as transparent cyan circles #geom_point(data = temp_individual, aes(x = lon_device, y = lat_device), color = &quot;cyan&quot;, alpha = 0.5) + ## Add the point data - get colours from object #geom_point(data = temp_individual, aes(x = lon_device, y = lat_device, color = track_colour), alpha = 0.5) + ## Add the journey locations geom_point(data = subset(temp_individual, track_segment == &quot;track.journey&quot;), aes(x = lon_device, y = lat_device, color = track_colour), alpha = 0.5) + ## Add the start locations geom_point(data = subset(temp_individual, track_segment == &quot;track.start&quot;), aes(x = lon_device, y = lat_device, color = track_colour), alpha = 0.5) + ## Add the end locations geom_point(data = subset(temp_individual, track_segment == &quot;track.end&quot;), aes(x = lon_device, y = lat_device, color = track_colour), alpha = 0.5) + ## plot the basemap again, but this time superimpose only the country borders over the point data ## this is to help you see better which points might obviously be over land. geom_sf(data = worldmap, fill = NA, color = &quot;black&quot;) + ## Set the bounding box to only include the point locations coord_sf(xlim = range(temp_individual$lon_device), ylim = range(temp_individual$lat_device)) + ## Customize the x and y axis labels labs(x = &quot;Longitude&quot;, y = &quot;Latitude&quot;) + ## add a title to the plot ggtitle(paste(&quot;points-individual:&quot;,&quot;\\n&quot;, animal_id, sep=&quot;&quot;)) + theme(plot.title = element_text(hjust = 0.5)) + ## remove legend theme(legend.position = &quot;none&quot;) ## the plot plot_individual_tracks ## save the plot ggsave(paste(path_to_folder, &quot;/&quot;, animal_id, &quot;_points.png&quot;, sep = &quot;&quot;), plot_individual_tracks, ## when units in mm, then width = 160, height = 160, dpi = 300, units = &quot;mm&quot;) ## print a loop progress message print(paste(&quot;Loop &quot;, i, &quot; of &quot;, max(df_sbtd_sf$bird_id_num), sep = &quot;&quot;)) ## remove the temporary file at the end of each loop rm(temp_individual) } 3.15.3 Save individual tracks as shapefiles ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## Save raw tracking data for each individual as shapefile for viewing in GIS software ---- ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ## reminder on data structure head(data.frame(df_sbtd_sf),2) for(i in 1:max(df_sbtd_sf$bird_id_num)){ ## subset the data taking the track information for each unique bird tagged temp_individual &lt;- df_sbtd_sf %&gt;% dplyr::filter(bird_id_num == i) ## create new folder (if needed) within current working directory where you will save data ## first create the name of the species and the file path you need ## also use gsub to replace spaces within character strings (words) with a &quot;-&quot; species_name &lt;- gsub(&quot; &quot;, &quot;-&quot;, temp_individual$scientific_name[1]) ## print the name for checking print(species_name) ## then create the new folder within current working directory path_to_folder &lt;- paste(&quot;./data-testing/tracking-data/&quot;, species_name, &quot;/shapefiles-individual-tracks&quot;, sep=&quot;&quot;) ## print the file path name for checking print(path_to_folder) ## Check if folder exists, and if it does not, then make a new folder if (!file.exists(path_to_folder)) { # If it does not exist, create a new folder dir.create(path_to_folder) print(paste(&quot;Created folder:&quot;, path_to_folder)) } else { # do nothing, but let us know the folder exists already print(paste(&quot;Folder already exists:&quot;, path_to_folder)) } ## write the spatial data. Label it by species and bird_id st_write(temp_individual, paste(path_to_folder, &quot;/tracks-individual-animals&quot;, species_name, &quot;_&quot;, temp_individual$bird_id[1], &quot;.shp&quot;, sep = &quot;&quot;), delete_layer = T) ## print a loop progress message print(paste(&quot;Loop &quot;, i, &quot; of &quot;, max(df_sbtd_sf$bird_id_num), sep = &quot;&quot;)) ## remove the temporary file at the end of each loop rm(temp_individual) } 3.15.4 When to remove or salvage data for a tracked individual [Examples / details to be added] In some cases, an entire track may be worth disregarding or trying to salvage. However, it often might be the case that only certain trips from the entire period an animal was tracked may be worth removing. NEXT STEP: Split data from individual animal into unique trips and then consider assessing each unique trip for data quality ## save updated file for next steps save(df_sbtd_sf, file = &quot;data-testing/tracking-data/Tracking_YESH_raw_step2.Rdata&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
